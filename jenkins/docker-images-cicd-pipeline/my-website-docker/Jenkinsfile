pipeline {
    agent any

    parameters {
        choice(name: 'REGISTRY', choices: ['GCP', 'DockerHub'], description: 'Select the registry to push the image')
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Tag for the Docker image (e.g., latest, 1.0.0)')
        string(name: 'Dockerfile_DIR', defaultValue: 'jenkins/docker-images-cicd-pipeline/my-website-docker', description: 'Directory where dockerfile code is located')
    }

    environment {
        IMAGE_NAME = ''  // Placeholder for the image name
        GCP_PROJECT_ID = 'shyamkprj' // Replace with your GCP Project ID
        GOOGLE_APPLICATION_CREDENTIALS = credentials("gcp-id")
        DOCKER_USER = ''
        DOCKER_PASS = ''
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    dir(params.Dockerfile_DIR) {
                    // Build the Docker image
                    IMAGE_NAME = params.REGISTRY == 'GCP' ? "gcr.io/$GCP_PROJECT_ID/example-image" : "sumit329/example-image"
                    sh "pwd"
                    sh "docker build -t ${IMAGE_NAME}:${params.IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Login to Registry') {
            steps {
                script {
                    if (params.REGISTRY == 'GCP') {
                            sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
                            sh "gcloud config set project $GCP_PROJECT_ID"
                    } 
                    else if (params.REGISTRY == 'DockerHub') {
                        // Authenticate to Docker Hub
                            sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                    }
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    // Push the Docker image
                    sh "gcloud auth configure-docker \
                        europe-north1-docker.pkg.dev"
                    sh "docker push ${IMAGE_NAME}:${params.IMAGE_TAG}"
                }
            }
        }

        stage('Post-Push Check') {
            steps {
                script {
                    // Check if the image is successfully pushed by verifying the image in the registry
                    if (params.REGISTRY == 'GCP') {
                        // Verify GCP Container Registry image exists (this may depend on your exact setup)
                        sh "gcloud container images list-tags ${IMAGE_NAME} --filter 'tags:${params.IMAGE_TAG}' --limit 1"
                    } else if (params.REGISTRY == 'DockerHub') {
                        // Verify Docker Hub image exists
                        sh "docker pull ${IMAGE_NAME}:${params.IMAGE_TAG}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Image pushed successfully to ${params.REGISTRY} with tag ${params.IMAGE_TAG}."
        }
        failure {
            echo "Image push failed to ${params.REGISTRY}."
        }
    }
}
