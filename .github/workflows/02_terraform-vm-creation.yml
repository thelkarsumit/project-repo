name: Terraform VM Creation

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    paths:
      - 'terraform_landing_zone/**/*.tf'  # Trigger on changes to .tf files
      - 'terraform_landing_zone/**/*.tfvars'  # Trigger on changes to .tfvars files
      - '.github/workflows/02_terraform-vm-creation.yml' # Trigger on perticular file"

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository to get the latest code
      - name: Checkout code
        uses: actions/checkout@v2
                
      # Step 2: Debugging the credentials file format
      - name: Debug - Display the contents of the credentials file
        run: cat "github/config/application_default_credentials.jso"  

      # Step 3: Authenticate with Google Cloud using the service account JSON
      - name: Authenticate with Google Cloud
        run: |
          gcloud auth activate-service-account --key-file="github/config/application_default_credentials.jso"
          gcloud config set project my-project-amit1-415215  # Set your GCP project ID
          
      # Step 4: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.x'    
          
      # Step 5: Terraform Initialization
      - name: Terraform Init
        run: terraform init
        working-directory: terraform_landing_zone/template/vm_temp/ansible_control_node_vm_temp  # Specify the Terraform directory if needed
      
      # Step 6: Terraform Plan
      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform_landing_zone/template/vm_temp/ansible_control_node_vm_temp  # Specify the Terraform directory if needed
        
      # Step 7: Terraform Apply (automatically approve)
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform_landing_zone/template/vm_temp/ansible_control_node_vm_temp  # Specify the Terraform directory if needed
